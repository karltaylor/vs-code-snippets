{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"React Native Class": {
		"prefix": "reactnativeclass",
		"body": [
			"import React, { Component } from 'react';",
			"import { View, Text } from 'react-native';",
			"",
			"export default class ${1:ClassName} extends Component {",
			"  render() {",
			"    return (",
			"      <View><Text>Hello World</Text></View>",
			"    )",
			"  }",
			"}"
		],
		"description": "React Native Class"
	},
	"React Class": {
		"prefix": "reactclass",
		"body": [
			"import React, { Component } from 'react';",
			"",
			"export default class ${1:ClassName} extends Component {",
			"  render() {",
			"    return (",
			"      <div>Hello World</div>",
			"    );",
			"  }",
			"}"
		],
	},
	"Connect Redux": {
		"prefix": "connect",
		"body": "import { connect } from 'react-redux';",
	},
	"Console Log": {
		"prefix": "cl",
		"body": "console.log($1)",
		"description": "Log output to console"
	},
	"Nav Prop": {
		"prefix": "navprop",
		"body": "navigation: NavigationScreenProp<NavigationRoute>,",
		"description": "Adds the correct navigation prop type"
	},
	"Nav Prop Import": {
		"prefix": "navpropimport",
		"body": "import type { NavigationScreenProp, NavigationRoute } from 'react-navigation';",
		"description": "Import the correct nav prop types"
	},
	"No Max Len": {
		"prefix": "nomaxlen",
		"body": "// eslint-disable-line max-len",
		"description": "Adds an eslint comment to disable the max length rule."
	},
	"mapStateToProps": {
		"prefix": "maps",
		"body": [
			"const mapStateToProps = state => {",
			"  return {}",
			"}"
		],
	}
}